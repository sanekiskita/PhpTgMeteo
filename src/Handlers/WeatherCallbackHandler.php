<?php

namespace App\Handlers;

use App\Handlers\MessageHandler;
use App\Interfaces\CallbackHandlerInterface;
use App\Services\CityService;
use App\Services\OpenMeteoWeatherService;
use Longman\TelegramBot\Entities\CallbackQuery;
use Longman\TelegramBot\Request;

# TODO: –≤—ã–Ω–µ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
class WeatherCallbackHandler implements CallbackHandlerInterface
{
    private CityService $cityService;
    private OpenMeteoWeatherService $weatherService;
    private MessageHandler $messageHandler;

    public function __construct(
        CityService $cityService, 
        OpenMeteoWeatherService $weatherService,
        MessageHandler $messageHandler
    ) {
        $this->cityService = $cityService;
        $this->weatherService = $weatherService;
        $this->messageHandler = $messageHandler;
    }
    
    public function handleCallback(CallbackQuery $callbackQuery): void
    {
        $callbackData = $callbackQuery->getData();
        
        if (strpos($callbackData, "weather_update_") === 0) {
            $cityCode = str_replace("weather_update_", "", $callbackData);
            $this->handleWeatherUpdateRequest($callbackQuery, $cityCode);
            return;
        }

        if (strpos($callbackData, "weather_") === 0) {
            $cityCode = str_replace("weather_", "", $callbackData);
            $this->handleWeatherRequest($callbackQuery, $cityCode);
            return;
        }

        if (strpos($callbackData, "list_cities_") === 0) {
            $page = (int)str_replace("list_cities_", "", $callbackData);
            $this->handleListCitiesRequest($callbackQuery, $page);
            return;
        }
    }

    private function handleListCitiesRequest(CallbackQuery $callbackQuery, int $page): void
    {
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $callbackQueryId = $callbackQuery->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        Request::answerCallbackQuery([
            "callback_query_id" => $callbackQueryId,
            "text" => "–°—Ç—Ä–∞–Ω–∏—Ü–∞ $page"
        ]);
        
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        $messageData = $this->messageHandler->getListCitiesCommand($chatId, $page);
        
        Request::editMessageText(array_merge($messageData, ["message_id" => $messageId]));
    }

    private function handleWeatherUpdateRequest(CallbackQuery $callbackQuery, string $cityCode): void
    {
        $city = $this->cityService->getCity($cityCode);
        $callbackQueryId = $callbackQuery->getId();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        
        if (!$city) {
            Request::answerCallbackQuery([
                "callback_query_id" => $callbackQueryId,
                "text" => "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ]);
            return;
        }
        
        Request::answerCallbackQuery([
            "callback_query_id" => $callbackQueryId,
            "text" => "–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É..."
        ]);
        
        Request::editMessageText(
            array_merge(
                $this->getWeatherMessage($cityCode),
                [
                    "message_id" => $callbackQuery->getMessage()->getMessageId(),
                    "chat_id" => $chatId
                ]
            )
        );
    }
    
    private function handleWeatherRequest(CallbackQuery $callbackQuery, string $cityCode): void
    {
        $city = $this->cityService->getCity($cityCode);
        $callbackQueryId = $callbackQuery->getId();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        
        if (!$city) {
            Request::answerCallbackQuery([
                "callback_query_id" => $callbackQueryId,
                "text" => "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ]);
            return;
        }
        
        Request::answerCallbackQuery([
            "callback_query_id" => $callbackQueryId,
            "text" => "–ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É..."
        ]);
        
        Request::sendMessage(
            array_merge(
                $this->getWeatherMessage($cityCode),
                ["chat_id" => $chatId]
            )
        );
    }

    private function getWeatherMessage($cityCode): array {
        $city = $this->cityService->getCity($cityCode);
        $weather = $this->weatherService->getWeather(
            $city->getLatitude(), 
            $city->getLongitude()
        );
        
        if ($weather) {
            $message = $this->formatWeatherMessage($city, $weather);
        } else {
            $message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {$city->getName()}";
        }

        $buttonUpdate = [
            "text" => "–û–±–Ω–æ–≤–∏—Ç—å",
            "callback_data" => "weather_update_{$cityCode}"
        ];
        
        return [
            "text" => $message,
            "parse_mode" => "HTML",
            "reply_markup" => json_encode([
                "inline_keyboard" => [[
                    $buttonUpdate
                ]]
            ])
        ];
    }
    
    private function formatWeatherMessage($city, array $weather): string
    {
        $emoji = $this->getWeatherEmoji($weather["weather_description"]);
        $timeFormat = "d.m.Y H:i";
        
        try {
            $currentDate = new \DateTime();
            $currentDate->setTimezone(new \DateTimeZone($city->getTimezone()));
            $localTime = $currentDate->format($timeFormat);
        } catch (\Exception $e) {
            $localTime = "-";
        }

        try {
            $lastUpdate = new \DateTime($weather["timestamp"], new \DateTimeZone($city->getTimezone()));
            $lastUpdate->setTimezone(new \DateTimeZone('Europe/Moscow'));
            $lastUpdate = $lastUpdate->format($timeFormat);
        } catch (\Exception $e) {
            $lastUpdate = "-";
        }

        // TODO: –¥–∞—Ç—É –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –≤–∏–¥–µ —Å–µ–≥–æ–¥–Ω—è, –≤—á–µ—Ä–∞, 2 –¥–Ω—è –Ω–∞–∑–∞–¥, 3 –¥–Ω—è –Ω–∞–∑–∞–¥ –∏–Ω–∞—á–µ –≤–µ—Ä–º—è
        return "{$emoji} <b>–ü–æ–≥–æ–¥–∞ –≤ {$city->getName()}</b>\n\n" .
               "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {$weather['temperature']}¬∞C\n" .
               "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {$weather['humidity']}%\n" .
               "üå™ –î–∞–≤–ª–µ–Ω–∏–µ: {$weather['pressure']} –º–º —Ä—Ç.—Å—Ç.\n" .
               "‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {$weather['weather_description']}\n" .
               "‚è∞ –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {$localTime}\n" .
               "‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–æ –º–æ—Å–∫–≤–µ): {$lastUpdate}";
    }
    
    private function getWeatherEmoji(string $description): string
    {
        $emojiMap = [
            "–Ø—Å–Ω–æ" => "‚òÄÔ∏è",
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ" => "üå§",
            "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å" => "‚õÖ",
            "–ü–∞—Å–º—É—Ä–Ω–æ" => "‚òÅÔ∏è",
            "–¢—É–º–∞–Ω" => "üå´",
            "–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º" => "üå®",
            "–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å" => "üåß",
            "–ú–æ—Ä–æ—Å—å" => "üåß",
            "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å" => "üåß",
            "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å" => "üåß",
            "–î–æ–∂–¥—å" => "üåß",
            "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å" => "‚õà",
            "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥" => "‚ùÑÔ∏è",
            "–°–Ω–µ–≥" => "‚ùÑÔ∏è",
            "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥" => "‚ùÑÔ∏è",
            "–ì—Ä–æ–∑–∞" => "‚õà"
        ];
        
        return $emojiMap[$description] ?? "‚ùì";
    }
} 